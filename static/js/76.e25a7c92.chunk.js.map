{"version":3,"file":"static/js/76.e25a7c92.chunk.js","mappings":"yMACA,GAAgB,kBAAoB,gCAAgC,cAAgB,4BAA4B,SAAW,uBAAuB,aAAe,2BAA2B,SAAW,wB,kBCKxL,SAASA,IACtB,OAAkCC,EAAAA,EAAAA,YAAlC,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAY,mCAAG,WAAOC,GAAP,kGAEMC,MAAM,sCAAD,OACYD,EADZ,sDAFX,cAEXE,EAFW,gBAKEA,EAASC,OALX,OAKXC,EALW,OAMjBR,EAAaQ,EAAKC,MAND,kDAQjBC,QAAQC,MAAR,MARiB,0DAAH,sDAmBlB,OAPAC,EAAAA,EAAAA,YAAU,WACRT,EAAaF,KACZ,CAACA,EAASD,KAMX,0BACE,eAAIa,UAAWC,EAAAA,SAAf,cACiBC,IAAdhB,EACGA,EAAUiB,KAAI,gBAAGZ,EAAH,EAAGA,GAAIa,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACZ,gBAAaN,UAAWC,EAAAA,aAAxB,WACE,gBAAKD,UAAWC,EAAAA,kBAAhB,SACoB,OAAjBI,GACC,gBACEL,UAAWC,EAAAA,cACXM,IAAG,yCAAoCF,GACvCG,IAAKJ,KAGP,gBACEJ,UAAWC,EAAAA,cACXM,IAAKE,EACLD,IAAKJ,OAIX,iBAAKJ,UAAWC,EAAAA,SAAhB,WACE,iBAAMD,UAAWC,EAAAA,SAAjB,SAAmCG,KACnC,2CAAmBE,UAlBdf,MAsBX,gB","sources":["webpack://movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"CastListItemPhoto\":\"Cast_CastListItemPhoto__IhUia\",\"CastItemPhoto\":\"Cast_CastItemPhoto__aYgMH\",\"CastInfo\":\"Cast_CastInfo__04CfJ\",\"CastListItem\":\"Cast_CastListItem__ZvpdR\",\"NameSpan\":\"Cast_NameSpan__2yMW9\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styles from './Cast.module.css'\nimport photo from './noPhoto.jpg'\n\n\nexport default function Cast() {\n  const [movieCast, setMovieCast] = useState();\n  const { movieId } = useParams();\n  \n  const getMovieCast = async (id) => {\n    try {\n      const response = await fetch(\n        `https://api.themoviedb.org/3/movie/${id}/credits?api_key=7d4759b38fdb93bbea25cb13d285324c`\n      );\n      const data = await response.json();\n      setMovieCast(data.cast);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n    \n  useEffect(() => {\n    getMovieCast(movieId);\n  }, [movieId, setMovieCast]);\n\n\n \n\n  return (\n    <div>\n      <ul className={styles.CastList}>\n        {movieCast !== undefined\n          ? movieCast.map(({ id, name, profile_path, character }) => (\n              <li key={id} className={styles.CastListItem}>\n                <div className={styles.CastListItemPhoto}>\n                  {profile_path !== null ? (\n                    <img\n                      className={styles.CastItemPhoto}\n                      src={`http://image.tmdb.org/t/p/w500/${profile_path}`}\n                      alt={name}\n                    />\n                  ) : (\n                    <img\n                      className={styles.CastItemPhoto}\n                      src={photo}\n                      alt={name}\n                    />\n                  )}\n                </div>\n                <div className={styles.CastInfo}>\n                  <span className={styles.NameSpan}>{name}</span>\n                  <span>Charackter: {character}</span>\n                </div>\n              </li>\n            ))\n          : 'No cast'}\n      </ul>\n    </div>\n  );\n}\n"],"names":["Cast","useState","movieCast","setMovieCast","movieId","useParams","getMovieCast","id","fetch","response","json","data","cast","console","error","useEffect","className","styles","undefined","map","name","profile_path","character","src","alt","photo"],"sourceRoot":""}